* Introduction
[[https://travis-ci.org/Lewis-Kelley/ez-macs.svg?branch=master]]

[[./demo.gif]]

Welcome to Emacs! This config file is intended for newbies, and even
more specifically towards people working a lot with Scheme.

Since Emacs bindings are +a lot+ a bit archaic, I've remapped some of
the more confusing ones to more contemporary analogs in the section
[[#modern-bindings-cua-mode]["Modern" Bindings]]. If instead you want to use Emacs "properly," change
the =modern= in the code below to =emacs=.

Alternatively, if you are more comfortable with Vim keybindings,
change =modern= to =vim=, and head to the [[#vim-keybindings-evil-mode][Evil]] section below. I'd
encourage you to try out using Emacs as Emacs before jumping ship back
to Vim, though; enabling Evil will disable other features of this
config.

#+BEGIN_SRC emacs-lisp
  ; String should be one of "modern", "emacs", or "vim"
  (setq keybindings "modern")
#+END_SRC
** Keyboard Shortcuts Introduction
General convention for expressing keyboard shortcuts is as follows:
- =C-= means hold the Ctrl key along with the other depicted key
- =M-= means hold the Alt(*) key along with the other depicted key
- spaces in between commands indicate you should release whatever keys
  you were holding before for the next sequence

Examples (and /really/ useful commands):
- =C-g= :: Ctrl-g
  + abort the current key sequence; try it with one of the later
    examples!
- =C-x C-c= :: Ctrl-x <release> Ctrl-c
  + quit Emacs
- =C-x s= :: Ctrl-x <release> s (note that you /do not/ hold down Ctrl
             while pressing s)
  + save all files
- =M-x= :: Alt-x
  + 'execute-extended-command', if you run this, you'll open a small
    prompt at the bottom of the window (in the "minibuffer") from
    which you can type any Emacs command you want. For example, try
    =M-x tetris=.

(*) It's =M-= because 35 years ago it was called the "Meta" key. You
see a lot of this stuff in Emacs.
** Installation
*** Windows
1. If you are using this for Scheme development, download the =petite=
   executable from [[https://www.scheme.com/download/pcsv84.exe][here]] and run the installer.
2. Download or clone this repository (there's a big green button up
   above).
3. Extract this repo's contents. This holds the /config/ file for
   Emacs, not Emacs itself.
4. Run =win-install.cmd= by double-clicking on it. This copies this
   configuration to the directory Emacs expects it to be.
   - When you want to uninstall, run =win-uninstall.cmd= and it will
     delete the extra copy of the folder.
5. Download the latest Windows Emacs binary from [[http://mirror.keystealth.org/gnu/emacs/windows/emacs-25.3_1-x86_64.zip][here]] (currently, this
   is linked to Emacs 25.3). /Now/ this is the actual Emacs program.
6. Launch Emacs using =bin/runemacs.exe= from the Emacs folder.
   - The first launch will take some time as it installs all the
     packages. Just let it run (even if it doesn't appear to be doing
     anything).
   - Subsequent launches will take less time.
7. In the future, continue to run =runemacs.exe=. You should probably
   pin this executable to your taskbar.

NOTE: Since =win-install.cmd= creates a /copy/ of the config, you will
need to edit that copy if you wish to make any changes after
installation. The easiest way to do this is =C-x C-f
~/.emacs.d/emacs.org=.
*** MacOS
1. If you are using this for Scheme development, download the =petite=
   executable from [[https://www.scheme.com/download/pcsv8.4-i3osx.tar.gz][here]]. Navigate to the downloaded directory and run:
   - =./configure=
   - =make=
   - =sudo make install=
2. Clone this repository to your home directory with: =git
   clone https://github.com/Lewis-Kelley/ez-macs.git ~/.emacs.d=.
3. Download and install the latest MacOS binary from [[https://emacsformacosx.com/][here]] (I know the
   site looks fishy, but it's legitimate).
4. Run Emacs from a terminal using =emacs=. (There may also be
   something you can double-click to run. I don't know.)
*** Linux
1. If you are using this for Scheme development, install =petite=
   using your package manager. If that doesn't work, instead download
   the =petite= executable from [[https://www.scheme.com/download/pcsv8.4-i3le.tar.gz][here]]. Navigate to the downloaded
   directory and run:
   - =./configure=
   - =make=
   - =sudo make install=
2. Clone this repository to your home directory with: =git
   clone https://github.com/Lewis-Kelley/ez-macs.git ~/.emacs.d=.
3. Install Emacs using your package manager (something like =sudo
   apt-get install emacs= should work).
4. Run Emacs from a terminal using =emacs=. (There may also be
   something you can double-click to run. I don't know.)
*** Troubleshooting
**** Searching for program: No such file or directory, petite
You don't have petite scheme installed. If you're using some other
scheme version, you should change the line in [[#scheme-support][Scheme Support]] to match.
** What Next?
I recommend skimming through this README to see the code and what's
going on, but if not, you can hit the ground running with =C-x C-f= to
open a file and get editing!

There are plenty of great resources for learning Emacs, most of which
are more extensive than what is here. A good start is [[http://ergoemacs.org/emacs/emacs.html][here]].
* What is this file?
This an /org-mode file/ (which you can tell because it has a =.org=
suffix). It does a lot (most of which is outside the scope of this
explanation), but suffice it to say that it allows me to put source
code blocks into some relatively pretty markup (that also shows up
well on GitHub!). If you actually look at =init.el=, it's really just
saying "load the emacs-lisp code found in =emacs.org=."

I mentioned "emacs-lisp." If you want a quick history, C is to C++ as
Lisp is to Scheme (roughly speaking). Lisp was the original, and as
such has a few more quirks. Regardless, that means that there are
parentheses /everywhere/ in the configuration. Just a heads
up.

Incidentally, when you want to comment something out, Lisp's comment
character is =;=.

#+BEGIN_SRC emacs-lisp
  ;; Hello! This is a comment!
  ;; And this is some random code:
  (list 1 2 3)
#+END_SRC
* Package Repository: MELPA
[[https://melpa.org/#/][MELPA]] is likely the largest package repositories for Emacs, and as
such it is necessary for a few of the packages this configuration
installs.

To browse packages, use =M-x package-list-packages=. From there,
you'll be able to install, remove, or upgrade packages as you see fit
(for more details, see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Menu.html#Package-Menu][this page]] in the manual).

I'd recommend against modifying this block unless you /really/ know
what you're doing.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (url (concat (if no-ssl "http" "https") "://melpa.org/packages/")))
    (add-to-list 'package-archives (cons "melpa" url) t))
  (when (< emacs-major-version 24)
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

  (package-initialize)
#+END_SRC
* Package Manager: use-package
[[https://github.com/jwiegley/use-package][use-package]] is just a handy macro that's useful for cleanly installing
and configuring different packages. Trust me when I say it makes
things easier.

#+BEGIN_SRC emacs-lisp
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC
* "Modern" Bindings: cua-mode
To make things a tad easier for newcomers, the kind Emacs developers
have added CUA (or Common User Access) mode. In brief this remaps
=C-x=, =C-c=, =C-v=, and =C-z= to cut, copy, paste, and undo
respectively as opposed to the various commands they act as by
default. For more information, type =C-h f cua-mode=.

If you want to disable this and use the default bindings, change the
=keybindings= variable in the [[#introduction][introduction]].

#+BEGIN_SRC emacs-lisp
  (when (equal keybindings "modern")
    (cua-mode))
#+END_SRC
* Vim Keybindings: Evil Mode
[[https://github.com/emacs-evil/evil][Evil]] mode, or the "Extensible VI Layer for Emacs" makes Emacs control
like Vim. If you can use Vim, you can use Evil mode. It's important to
note, however, that you won't be able to use the =:= commands. Use
=C-z= to switch between Evil mode and more traditional Emacs bindings.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :if (equal keybindings "vim")
    :ensure t
    :init (evil-mode 1))
#+END_SRC
* Scheme Support
This tells Emacs to open any files ending in =.ss= as Scheme
files. Otherwise, it would just try to guess what kind of file it
was.

#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist (cons '("\\.ss" . scheme-mode) auto-mode-alist))
#+END_SRC

Next, we tell Emacs what scheme executable to use:

#+BEGIN_SRC emacs-lisp
  (setq scheme-program-name "petite")
#+END_SRC

To start scheming, press =C-x C-e= in the scheme file to automatically
start up a REPL and evaluate the previous expression. Note that while
you're in the REPL, you can use =C-c C-l= to quickly load a Scheme
file!

#+BEGIN_SRC emacs-lisp
  (defun ez/start-repl-and-eval ()
    (interactive)
    (run-scheme scheme-program-name)
    (split-window-below)
    (previous-buffer)
    (scheme-send-last-sexp))

  (add-hook 'scheme-mode-hook
            (lambda () (local-set-key (kbd "C-x C-e") 'ez/start-repl-and-eval)))
#+END_SRC


#+END_SRC
* Helpful Keybindings: Hydra
To quote the [[https://github.com/abo-abo/hydra][Hydra]] documentation:

#+BEGIN_QUOTE
Imagine that you have bound =C-c j= and =C-c k= in your config. You want
to call =C-c j= and =C-c k= in some (arbitrary) sequence. Hydra allows
you to:

Bind your functions in a way that pressing =C-c jjkk3j5k= is
equivalent to pressing =C-c j= =C-c j= =C-c k= =C-c k= =M-3 C-c j=
=M-5 C-c k=. Any key other than =j= or =k= exits this state.
#+END_QUOTE

This is being used primarily for [[#move-through-parentheses-paredit][Paredit]].

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
#+END_SRC
* Move Through Parentheses: Paredit
[[https://www.emacswiki.org/emacs/ParEdit][Paredit]] allows for easy editing and navigation of parentheses, and
(most usefully) it enforces matching parentheses and valid syntax
trees. (See [[https://www.youtube.com/watch?v=D6h5dFyyUX0][this video]] for a great demonstration.)

This uses the above [[#helpful-keybindings-hydra][Hydra]] package to allow for a better user
experience. Press =M-s= while in a Scheme file to start!

If you don't like using paredit, edit the value below to be =nil=
instead of =1=.

#+BEGIN_SRC emacs-lisp
  (setq use-paredit 1)
#+END_SRC

Because of some of the trickery that Evil does, paredit is disabled
when you are using Evil mode.

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :if (and use-paredit (not (equal keybindings "vim")))
    :requires hydra
    :ensure t
    :hook
    (scheme-mode . enable-paredit-mode)
    (inferior-scheme-mode . enable-paredit-mode)
    :config
    (defhydra hydra-paredit ()
      ("f" paredit-forward  "Forward")
      ("b" paredit-backward "Back")
      ("u" paredit-backward-up "Up")
      ("d" paredit-forward-down "Down")
      ("w" paredit-wrap-round "Wrap")
      ("z" paredit-splice-sexp "Unwrap")
      ("r" paredit-raise-sexp "Raise")
      ("e" paredit-forward-slurp-sexp "Expand")
      ("c" paredit-forward-barf-sexp "Contract")
      ("s" paredit-split-sexp "Shrink")
      ("x" nil "Quit"))
    (define-key paredit-mode-map (kbd "M-s") 'hydra-paredit/body))
#+END_SRC
* Select Whole Expression: expand-region
[[https://github.com/magnars/expand-region.el][expand-region]] allows you to easily select a whole expression at a
time. Try it out in a Scheme file with =M-i=!

Since this is extremely similar to Vim's builtin commands, this is
disabled when using Vim-style keybindings.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :if (not (equal keybindings "vim"))
    :ensure t
    :config
    (global-set-key (kbd "M-i") 'er/expand-region))
#+END_SRC
* Pretty Parentheses: Rainbow Delimiters
[[https://github.com/Fanael/rainbow-delimiters][Rainbow Delimiters]] recolors parentheses, braces, and brackets in
matching pairs. This makes programming, especially in Scheme, much
easier (and prettier).

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

Other miscellaneous parentheses stuff:

#+BEGIN_SRC emacs-lisp
  ;; While hovering over a parenthesis, highlight its match.
  (show-paren-mode 1)
  ;; Time taken to highlight the matching parenthesis
  (setq show-paren-delay 0)
#+END_SRC
* Smooth Scrolling
This makes Emacs scroll more smoothly than it does by
default. Normally it jumps up and down a whole page at a time.

#+BEGIN_SRC emacs-lisp
  (setq redisplay-dont-pause t
        scroll-margin 3
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1)
#+END_SRC
* Lego Theme
This is my own custom theme. If you would rather start with vanilla
Emacs, you can comment out the line. Alternatively, use =M-x
customize-themes= to load a different theme.

#+BEGIN_SRC emacs-lisp
  (load-theme 'lego t)
#+END_SRC
* Miscellaneous
** Stop the Beeping
Emacs often beeps when you get an error. It's kind of annoying, so
here it's turned off.
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Simplify Yes and No Prompts
Some prompts ask for "Yes/No" and this just shortens that to "y/n".
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
